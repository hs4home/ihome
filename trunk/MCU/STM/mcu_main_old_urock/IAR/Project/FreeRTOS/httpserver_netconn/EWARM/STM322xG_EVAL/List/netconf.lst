###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        26/Sep/2014  17:06:39
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\netconf.c
#    Command line =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\netconf.c
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM322xG_EVAL -lcN
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\
#        -o
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2x7_ETH_Driver\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EVAL\STM322xG_EVAL\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\lwip\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\netif\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\ipv4\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\port\STM32F2x7\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\port\STM32F2x7\FreeRTOS\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\FreeRTOS_v7.4.2\portable\IAR\ARM_CM3\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\FreeRTOS_v7.4.2\include\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0_2\arm\CMSIS\Include\"
#    List file    =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\netconf.lst
#    Object file  =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\netconf.o
#
###############################################################################

C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\netconf.c
      1          /**
      2            ******************************************************************************
      3            * @file    netconf.c
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    07-October-2011
      7            * @brief   Network connection configuration
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "lwip/mem.h"
     24          #include "lwip/memp.h"
     25          #include "lwip/dhcp.h"
     26          #include "ethernetif.h"
     27          #include "main.h"
     28          #include "netconf.h"
     29          #include "tcpip.h"
     30          #include <stdio.h>
     31          
     32          /* Private typedef -----------------------------------------------------------*/
     33          typedef enum 
     34          { 
     35            DHCP_START=0,
     36            DHCP_WAIT_ADDRESS,
     37            DHCP_ADDRESS_ASSIGNED,
     38            DHCP_TIMEOUT
     39          } 
     40          DHCP_State_TypeDef;
     41          /* Private define ------------------------------------------------------------*/
     42          #define MAX_DHCP_TRIES 5
     43          
     44          /* Private macro -------------------------------------------------------------*/
     45          /* Private variables ---------------------------------------------------------*/
     46          struct netif xnetif; /* network interface structure */
     47          
     48          /* Private functions ---------------------------------------------------------*/
     49          /**
     50            * @brief  Initializes the lwIP stack
     51            * @param  None
     52            * @retval None
     53            */
     54          void LwIP_Init(void)
     55          {
     56            struct ip_addr ipaddr;
     57            struct ip_addr netmask;
     58            struct ip_addr gw;
     59          #ifndef USE_DHCP 
     60            uint8_t iptab[4];
     61            uint8_t iptxt[20];
     62          #endif
     63            /* Create tcp_ip stack thread */
     64            tcpip_init( NULL, NULL );	
     65          
     66            /* IP address setting & display on STM32_evalboard LCD*/
     67          #ifdef USE_DHCP
     68            ipaddr.addr = 0;
     69            netmask.addr = 0;
     70            gw.addr = 0;
     71          #else
     72            IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
     73            IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
     74            IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
     75          #endif
     76          
     77            /* - netif_add(struct netif *netif, struct ip_addr *ipaddr,
     78                      struct ip_addr *netmask, struct ip_addr *gw,
     79                      void *state, err_t (* init)(struct netif *netif),
     80                      err_t (* input)(struct pbuf *p, struct netif *netif))
     81              
     82             Adds your network interface to the netif_list. Allocate a struct
     83            netif and pass a pointer to this structure as the first argument.
     84            Give pointers to cleared ip_addr structures when using DHCP,
     85            or fill them with sane numbers otherwise. The state pointer may be NULL.
     86          
     87            The init function pointer must point to a initialization function for
     88            your ethernet netif interface. The following code illustrates it's use.*/
     89          
     90            netif_add(&xnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
     91          
     92           /*  Registers the default network interface. */
     93            netif_set_default(&xnetif);
     94          
     95           /*  When the netif is fully configured this function must be called.*/
     96            netif_set_up(&xnetif); 
     97          }
     98          
     99          #ifdef USE_DHCP
    100          /**
    101            * @brief  LwIP_DHCP_Process_Handle
    102            * @param  None
    103            * @retval None
    104            */
    105          void LwIP_DHCP_task(void * pvParameters)
    106          {
    107            struct ip_addr ipaddr;
    108            struct ip_addr netmask;
    109            struct ip_addr gw;
    110            uint32_t IPaddress;
    111            uint8_t iptab[4];
    112            uint8_t iptxt[20];
    113            uint8_t DHCP_state;  
    114            DHCP_state = DHCP_START;
    115          
    116            for (;;)
    117            {
    118              switch (DHCP_state)
    119              {
    120                case DHCP_START:
    121                {
    122                  dhcp_start(&xnetif);
    123                  IPaddress = 0;
    124                  DHCP_state = DHCP_WAIT_ADDRESS;
    125                }
    126                break;
    127          
    128                case DHCP_WAIT_ADDRESS:
    129                {
    130                  /* Read the new IP address */
    131                  IPaddress = xnetif.ip_addr.addr;
    132          
    133                  if (IPaddress!=0) 
    134                  {
    135                    DHCP_state = DHCP_ADDRESS_ASSIGNED;	
    136                    
    137                    /* Stop DHCP */
    138                    dhcp_stop(&xnetif);
    139          
    140                    /* end of DHCP process: LED1 stays ON*/
    141                    LEDOn(LED1);
    142                    vTaskDelete(NULL);
    143                  }
    144                  else
    145                  {
    146                    /* DHCP timeout */
    147                    if (xnetif.dhcp->tries > MAX_DHCP_TRIES)
    148                    {
    149                      DHCP_state = DHCP_TIMEOUT;
    150          
    151                      /* Stop DHCP */
    152                      dhcp_stop(&xnetif);
    153          
    154                      /* Static address used */
    155                      IP4_ADDR(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
    156                      IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
    157                      IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
    158                      netif_set_addr(&xnetif, &ipaddr , &netmask, &gw);
    159          
    160                      vTaskDelete(NULL);
    161                    }
    162                  }
    163                }
    164                break;
    165          
    166                default: break;
    167              }
    168              /* wait 250 ms */
    169              vTaskDelay(250);
    170            }   
    171          }
    172          #endif  /* USE_DHCP */
    173          
    174          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   LwIP_Init
        32   -> htonl
        32   -> netif_add
        32   -> netif_set_default
        32   -> netif_set_up
        32   -> tcpip_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     100  LwIP_Init
      56  xnetif

 
  56 bytes in section .bss
 100 bytes in section .text
 
 100 bytes of CODE memory
  56 bytes of DATA memory

Errors: none
Warnings: 2
