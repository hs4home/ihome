###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        26/Sep/2014  17:06:41
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\power_cntrl_thread.c
#    Command line =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\power_cntrl_thread.c
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM322xG_EVAL -lcN
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\
#        -o
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2x7_ETH_Driver\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EVAL\STM322xG_EVAL\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\lwip\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\netif\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\ipv4\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\port\STM32F2x7\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\port\STM32F2x7\FreeRTOS\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\FreeRTOS_v7.4.2\portable\IAR\ARM_CM3\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\FreeRTOS_v7.4.2\include\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0_2\arm\CMSIS\Include\"
#    List file    =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\power_cntrl_thread.lst
#    Object file  =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\power_cntrl_thread.o
#
###############################################################################

C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\power_cntrl_thread.c
      1          #include "main.h"
      2          #include "power_cntrl_thread.h"
      3          #include "spi_low_level.h"
      4          
      5          //---Queue----------------------------------------------------------------------
      6          extern xQueueHandle power_control_queue ;
      7          //extern xQueueHandle tcp_client_queue ;
      8          extern xQueueHandle xQueue_sendText_t ;
      9          
     10          //---- Semaphores---------------------------------------------------------------
     11          extern xSemaphoreHandle xUSARTSemaphore;
     12          
     13          //---Timers --------------------------------------------------------------------
     14          extern portTickType xTicksToWait; 
     15          
     16          
     17          uint8_t	current_relay_state[NUM_RELAY_BOARDS+1];        // 0 - not used; [1-8] - boards Сосотояние реле
     18          uint8_t	current_moves_state[NUM_RELAY_BOARDS+1];        // 0 - not used; [1-8] - boards Сщстояние датчиков движения
     19          
     20          
     21          /**
     22           * 	 *
     23           * 	@brief Main thread function. Executed every RELAY_SCAN_PERIOD_MS millicesonds.
     24           *
     25           *
     26           * 	@param  *pParams
     27           *
     28           * 	@return never
     29           *
     30           */
     31          void power_control_thread(void *pParams)
     32          {
     33          	uint8_t			board;
     34          	uint8_t 		new_relay_state;
     35                  uint8_t 		new_moves_state;
     36          
     37          
     38          	portTickType 	xLastWakeTime;
     39          
     40          //	msg_dbg_tsk(("Entering power_control_thread...\n\r"));
     41          
     42          
     43          	xLastWakeTime = xTaskGetTickCount();
     44          
     45          	// start endless loop
     46          	while(1) {
     47          
     48          		// read data from input queue until it is empty
     49          		while(relay_read_input_queue(&board, &new_relay_state) == pdTRUE) {
     50          
     51          			// check input parameter
     52          			if (board >= NUM_RELAY_BOARDS) {
     53          //				msg_dbg_tsk(("Error in power_control_thread: board >= NUM_RELAY_BOARDS\n\r"));
     54          				continue;
     55          			}
     56          
     57          			// for every read value update power register in relay board
     58          			if (new_relay_state != current_relay_state[board]) {
     59          
     60          				current_relay_state[board] = new_relay_state;
     61          
     62          				// relay_write_reg_spi need board index in [1..8] range, so + 1
     63          				relay_write_reg_spi(board, new_relay_state);
     64          			}
     65          		}
     66          
     67          
     68          		// scan through all relay boards and read it power register
     69          		for (board = 1; board <= NUM_RELAY_BOARDS; board++) {
     70          
     71          			new_relay_state = relay_read_reg_spi(board);  //Считываем состояние выключателей (реле)
     72          
     73          			if (new_relay_state != current_relay_state[board]) {
     74          
     75          				current_relay_state[board] = new_relay_state;
     76          
     77          				if (relay_write_output_queue(board, SWITCH, new_relay_state) != pdTRUE) {
     78          //					msg_dbg_tsk(("Error in power_control_thread: can not write to output queue\n\r"));
     79          				}
     80          
     81          
     82          			}
     83                                  
     84          			new_moves_state =  relay_read_moves_spi(board);  // Считываем состояние датчиков движения
     85          
     86          			if (new_moves_state != current_moves_state[board]) {
     87          
     88          				current_moves_state[board] = new_moves_state;
     89          
     90          				if (relay_write_output_queue(board, MOVE, new_moves_state) != pdTRUE) {
     91          //					msg_dbg_tsk(("Error in power_control_thread: can not write to output queue\n\r"));
     92          				}
     93          
     94          
     95          			}
     96                                  
     97          
     98          		}
     99          
    100          
    101          		vTaskDelayUntil( &xLastWakeTime, RELAY_SCAN_PERIOD_MS/portTICK_RATE_MS );
    102          
    103          	} // while(1)
    104          }
    105          
    106          
    107          
    108          
    109          // internal fucntions
    110          
    111          /**
    112           * 	function relay_read_input_queue
    113           *
    114           * 	Reads power_control_queue. If queue is empty - exit immediately.
    115           * 	Queue item is uint16_t word:
    116           * 		Eight MSB - board number
    117           * 		Eight LSB - new relay state
    118           *
    119           *
    120           * 	@param  *board A pointer to uint8_t variable to hold relay board number
    121           *
    122           * 	@param  *new_relay_state A pointer to uint8_t variable to hold new relay state
    123           *
    124           * 	@return pdTRUE if successfully read data from queue, else - pdFALSE
    125           *
    126           */
    127          portBASE_TYPE relay_read_input_queue(uint8_t *board, uint8_t *new_relay_state)
    128          {
    129          	uint16_t data16;
    130          
    131          	// if queue is empty - exit immediately
    132          	if (xQueueReceive(power_control_queue, &data16, 0) == pdTRUE) {
    133          		*board 			= (uint8_t)(data16 >> 8);
    134          		*new_relay_state = (uint8_t)data16;
    135          		return pdTRUE;
    136          	}
    137          
    138          	return pdFALSE;
    139          }
    140          
    141          /**
    142           *
    143           * 	@brief Posts data to tcp_client_queue.
    144           * 	If queue is full - wait for QUEUE_WRITE_TICKS_TO_WAIT system ticks
    145           *
    146           * 	Queue item is uint16_t word:
    147           * 		Eight MSB - board number
    148           * 		Eight LSB - new relay state
    149           *
    150           *
    151           * 	@param  board Relay board number
    152           *
    153           * 	@param  new_relay_state New relay state
    154           *
    155           * 	@return pdTRUE if successfully posted data to queue, else - pdFALSE
    156           *
    157           */
    158          portBASE_TYPE relay_write_output_queue(uint8_t board, uint8_t sensor, uint8_t new_relay_state)
    159          {
    160          //	uint16_t data16;
    161          //        struct sendStateRelays_t StateRelays;
    162          //        StateRelays.board = board;
    163          //        StateRelays.relay_states = new_relay_state;
    164          //	data16 = (((uint16_t)board) << 8) + new_relay_state;
    165                  
    166          //        struct sendStateRelays_t StateRelays;
    167                  struct sendText_t send_Data_HTTP;
    168                  portBASE_TYPE xStatus ;
    169                
    170                  char begin_text[]="GET http://192.168.0.103/objects/?object=ToHost&op=m&m=getBoardStatus&Board=";        
    171                  char end_text[] = " HTTP/1.1\r\nHost: 192.168.0.103\r\nConnection: close\r\n\r\n\0";
    172                  char brd[2];
    173                  char rl[4];
    174                
    175                  if (sensor == 0){          
    176                       send_Data_HTTP.cmd [0] = 0;
    177                       strcat(send_Data_HTTP.cmd, begin_text);
    178                       sprintf(brd, "%d", board);
    179                       strcat(send_Data_HTTP.cmd, brd);
    180                       strcat(send_Data_HTTP.cmd, "&Inputs=");
    181                       sprintf(rl, "%d", new_relay_state);   
    182                       strcat(send_Data_HTTP.cmd, rl);
    183                       strcat(send_Data_HTTP.cmd, end_text);
    184                       
    185                       send_Data_HTTP.len = strlen(send_Data_HTTP.cmd);        
    186                       xStatus = xQueueSendToBack( xQueue_sendText_t, &send_Data_HTTP, QUEUE_WRITE_TICKS_TO_WAIT );
    187             
    188                       return xStatus;
    189                  }
    190                  else if (sensor == 1){
    191                       send_Data_HTTP.cmd [0] = 0;
    192                       strcat(send_Data_HTTP.cmd, begin_text);
    193                       sprintf(brd, "%d", board);
    194                       strcat(send_Data_HTTP.cmd, brd);
    195                       strcat(send_Data_HTTP.cmd, "&Sensors=");
    196                       sprintf(rl, "%d", new_relay_state);   
    197                       strcat(send_Data_HTTP.cmd, rl);
    198                       strcat(send_Data_HTTP.cmd, end_text);
    199                       
    200                       send_Data_HTTP.len = strlen(send_Data_HTTP.cmd);        
    201                       xStatus = xQueueSendToBack( xQueue_sendText_t, &send_Data_HTTP, QUEUE_WRITE_TICKS_TO_WAIT );     
    202                       return xStatus;
    203                  }
    204          }
    205          
    206          
    207          
    208          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   power_control_thread
        24   -> relay_read_input_queue
        24   -> relay_read_moves_spi
        24   -> relay_read_reg_spi
        24   -> relay_write_output_queue
        24   -> relay_write_reg_spi
        24   -> vTaskDelayUntil
        24   -> xTaskGetTickCount
      16   relay_read_input_queue
        16   -> xQueueGenericReceive
     336   relay_write_output_queue
       336   -> __aeabi_memcpy4
       336   -> sprintf
       336   -> strcat
       336   -> strlen
       336   -> xQueueGenericSend


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
      80  ?_0
      56  ?_1
       4  ?_2
      12  ?_3
      12  ?_4
       4  current_moves_state
       4  current_relay_state
     212  power_control_thread
      48  relay_read_input_queue
     246  relay_write_output_queue

 
   8 bytes in section .bss
 164 bytes in section .rodata
 542 bytes in section .text
 
 542 bytes of CODE  memory
 164 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: 1
