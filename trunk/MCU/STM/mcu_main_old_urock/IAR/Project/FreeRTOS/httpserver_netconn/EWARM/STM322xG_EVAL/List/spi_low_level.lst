###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        26/Sep/2014  17:06:42
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\spi_low_level.c
#    Command line =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\spi_low_level.c
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM322xG_EVAL -lcN
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\
#        -o
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2x7_ETH_Driver\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EVAL\STM322xG_EVAL\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\lwip\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\netif\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\ipv4\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\port\STM32F2x7\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\port\STM32F2x7\FreeRTOS\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\FreeRTOS_v7.4.2\portable\IAR\ARM_CM3\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\FreeRTOS_v7.4.2\include\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0_2\arm\CMSIS\Include\"
#    List file    =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\spi_low_level.lst
#    Object file  =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\spi_low_level.o
#
###############################################################################

C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\spi_low_level.c
      1          /** \file spi_cpld.c
      2           *  \brief File containing functions to work with CPLD over SPI bus
      3          
      4          
      5          
      6           */
      7          
      8          #include "main.h"
      9          #include "spi_low_level.h"
     10          
     11          
     12          
     13          
     14          
     15          
     16          /**
     17            * \brief  Initializes SPI controller in polling mode
     18          
     19            * \return None
     20            */
     21          void init_spi(void)
     22          {
     23            SPI_InitTypeDef  SPI_InitStructure;
     24          
     25            SPI_LowLevel_Init();
     26              
     27          
     28            // SPI configuration 
     29            SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
     30            SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
     31            SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
     32            SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
     33            SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
     34            SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
     35            SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
     36          
     37            SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
     38            SPI_InitStructure.SPI_CRCPolynomial = 7;
     39            SPI_Init(CPLD_SPI, &SPI_InitStructure);
     40          
     41            // Enable the CPLD_SPI  
     42            SPI_Cmd(CPLD_SPI, ENABLE);
     43          }
     44          
     45          
     46          
     47          
     48          void SPI_LowLevel_Init(void)
     49          {
     50            GPIO_InitTypeDef GPIO_InitStructure;
     51          
     52          
     53            // NSS
     54            RCC_AHB1PeriphClockCmd(SPI_NSS_GPIO_CLK, ENABLE);
     55            GPIO_InitStructure.GPIO_Pin = SPI_NSS_PIN;
     56          
     57            spi_nss_high();
     58          
     59            // configure as output
     60            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     61            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     62            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
     63            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     64          
     65            GPIO_Init(SPI_NSS_GPIO_PORT, &GPIO_InitStructure);
     66          
     67          
     68            // Enable the SPI clock 
     69            CPLD_SPI_CLK_INIT(CPLD_SPI_CLK, ENABLE);
     70          
     71            // Enable GPIO clocks 
     72            RCC_AHB1PeriphClockCmd(CPLD_SPI_SCK_GPIO_CLK | CPLD_SPI_MISO_GPIO_CLK | 
     73                                   CPLD_SPI_MOSI_GPIO_CLK, ENABLE);
     74            
     75            // SPI pins configuration ************************************************
     76          
     77            // Connect SPI pins to AF
     78            GPIO_PinAFConfig(CPLD_SPI_SCK_GPIO_PORT, CPLD_SPI_SCK_SOURCE, CPLD_SPI_SCK_AF);
     79            GPIO_PinAFConfig(CPLD_SPI_MISO_GPIO_PORT, CPLD_SPI_MISO_SOURCE, CPLD_SPI_MISO_AF);
     80            GPIO_PinAFConfig(CPLD_SPI_MOSI_GPIO_PORT, CPLD_SPI_MOSI_SOURCE, CPLD_SPI_MOSI_AF);
     81          
     82            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     83            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     84            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     85            GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
     86                  
     87            // SPI SCK pin configuration 
     88            GPIO_InitStructure.GPIO_Pin = CPLD_SPI_SCK_PIN;
     89            GPIO_Init(CPLD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
     90          
     91            // SPI MOSI pin configuration 
     92            GPIO_InitStructure.GPIO_Pin =  CPLD_SPI_MOSI_PIN;
     93            GPIO_Init(CPLD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
     94          
     95            // SPI MISO pin configuration 
     96            GPIO_InitStructure.GPIO_Pin =  CPLD_SPI_MISO_PIN;
     97            GPIO_Init(CPLD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
     98          
     99          
    100          
    101            // init pins for sys cpld mode and channel selection
    102            sys_cpld_bus_init();
    103          
    104          
    105          }
    106          
    107          
    108          
    109          void SPI_LowLevel_DeInit(void)
    110          {
    111            GPIO_InitTypeDef GPIO_InitStructure;
    112          
    113            // Disable the CPLD_SPI  ***********************************************
    114            SPI_Cmd(CPLD_SPI, DISABLE);
    115            
    116            // DeInitializes the CPLD_SPI ******************************************
    117            SPI_I2S_DeInit(CPLD_SPI);
    118            
    119          
    120            // CPLD_SPI Periph clock disable ***************************************
    121            CPLD_SPI_CLK_INIT(CPLD_SPI_CLK, DISABLE);
    122          
    123                
    124            // Configure all pins used by the SPI as input floating *****************
    125            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    126            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    127          
    128            GPIO_InitStructure.GPIO_Pin = CPLD_SPI_SCK_PIN;
    129            GPIO_Init(CPLD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
    130          
    131            GPIO_InitStructure.GPIO_Pin = CPLD_SPI_MISO_PIN;
    132            GPIO_Init(CPLD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
    133          
    134            GPIO_InitStructure.GPIO_Pin = CPLD_SPI_MOSI_PIN;
    135            GPIO_Init(CPLD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
    136          
    137          }
    138          
    139          
    140          
    141          
    142          /*
    143            * Sends a byte through the SPI interface and return the byte received
    144            *         from the SPI bus.
    145            * @param  byte: byte to send.
    146            * @retval The value of the received byte.
    147            */
    148          uint8_t SPI_SendRecieve(uint8_t byte)
    149          {
    150            // Loop while DR register in not emplty 
    151            while (SPI_I2S_GetFlagStatus(CPLD_SPI, SPI_I2S_FLAG_TXE) == RESET);
    152          
    153            //  Send byte through the SPI peripheral 
    154            SPI_I2S_SendData(CPLD_SPI, byte);
    155          
    156            // Wait to receive a byte 
    157            while (SPI_I2S_GetFlagStatus(CPLD_SPI, SPI_I2S_FLAG_RXNE) == RESET);
    158          
    159            // Return the byte read from the SPI bus 
    160            return SPI_I2S_ReceiveData(CPLD_SPI);
    161          }
    162          
    163          
    164          
    165          
    166          
    167          /**
    168            * \brief  Sends two bytes commend to relay board
    169          	
    170          	\param cmd Selects opperation and register to access
    171          	\param reg_val Register data to write
    172          
    173            * \return The value of the received byte
    174            */
    175          uint8_t SPI_Send_Command(uint8_t board, uint8_t cmd, uint8_t reg_val)
    176          {
    177          	uint8_t ret_val;
    178            
    179          	spi_nss_low();
    180          	
    181          	SPI_SendRecieve(cmd);
    182          	ret_val = SPI_SendRecieve(reg_val);
    183          	
    184          	spi_nss_high();
    185          	
    186          	return ret_val; 	
    187          }
    188          
    189          
    190          
    191          
    192          // board - board index in range [1..8]
    193          void relay_write_reg_spi(uint8_t board, uint8_t data_val)
    194          {
    195          
    196          	//select channel
    197          	// sel mode = 0 - SPI
    198          	set_cpld_mode_low();
    199          	// sel channel
    200          	set_cpld_channel(board);
    201          
    202          	SPI_Send_Command(board, CPLD_CMD_WRITE, data_val);
    203          }
    204          
    205          
    206          // board - board index in range [1..8]
    207          uint8_t relay_read_reg_spi(uint8_t board)
    208          {
    209          	//select channel
    210          	// sel mode = 0 - SPI
    211          	set_cpld_mode_low();
    212          	// sel channel
    213          	set_cpld_channel(board);
    214          
    215          	return SPI_Send_Command(board, CPLD_CMD_READ, 1);
    216          }
    217          
    218          
    219          
    220          // board - board index in range [1..8]
    221          uint8_t spi_read_id(uint8_t board)
    222          {
    223          	//select channel
    224          	// sel mode = 0 - SPI
    225          	set_cpld_mode_low();
    226          	// sel channel
    227          	set_cpld_channel(board);
    228          
    229          	return SPI_Send_Command(board, CPLD_CMD_READ_ID, 1);
    230          }
    231          
    232          // board - board index in range [1..8]
    233          uint8_t relay_read_moves_spi(uint8_t board)
    234          {
    235          	//select channel
    236          	// sel mode = 0 - SPI
    237          	set_cpld_mode_low();
    238          	// sel channel
    239          	set_cpld_channel(board);
    240          
    241          	return SPI_Send_Command(board, CPLD_CMD_READ_MOVES, 1);
    242          }
    243          
    244          void spi_nss_low()
    245          {
    246          	SPI_NSS_GPIO_PORT->BSRRH = SPI_NSS_PIN;
    247          }
    248          
    249          void spi_nss_high()
    250          {
    251          	SPI_NSS_GPIO_PORT->BSRRL = SPI_NSS_PIN;
    252          }
    253          
    254          
    255          
    256          
    257          // functions for CPLD on MCU board
    258          // select channel and mode
    259          
    260          void sys_cpld_bus_init()
    261          {
    262          	GPIO_InitTypeDef  GPIO_InitStructure;
    263          
    264          
    265          	RCC_AHB1PeriphClockCmd(CPLD_MODE_GPIO_CLK, ENABLE);
    266          	RCC_AHB1PeriphClockCmd(CPLD_SEL_CHAN_0_GPIO_CLK, ENABLE);
    267          	RCC_AHB1PeriphClockCmd(CPLD_SEL_CHAN_1_GPIO_CLK, ENABLE);
    268          	RCC_AHB1PeriphClockCmd(CPLD_SEL_CHAN_2_GPIO_CLK, ENABLE);
    269          
    270          
    271          	// outputs
    272          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    273          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    274          	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    275          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    276          
    277          	// init cpld_mode pin
    278          	GPIO_InitStructure.GPIO_Pin = CPLD_MODE_PIN;
    279          	GPIO_Init(CPLD_MODE_PORT, &GPIO_InitStructure);
    280          
    281            	// init sel_channel_x pins
    282          	GPIO_InitStructure.GPIO_Pin = CPLD_SEL_CHAN_0_PIN;
    283          	GPIO_Init(CPLD_SEL_CHAN_0_PORT, &GPIO_InitStructure);
    284          
    285          	GPIO_InitStructure.GPIO_Pin = CPLD_SEL_CHAN_1_PIN;
    286          	GPIO_Init(CPLD_SEL_CHAN_1_PORT, &GPIO_InitStructure);
    287          
    288          	GPIO_InitStructure.GPIO_Pin = CPLD_SEL_CHAN_2_PIN;
    289          	GPIO_Init(CPLD_SEL_CHAN_2_PORT, &GPIO_InitStructure);
    290          
    291          }
    292          
    293          void set_cpld_mode_high()	// sel JTAG mode
    294          {
    295          	CPLD_MODE_PORT->BSRRL = CPLD_MODE_PIN;
    296          }
    297          
    298          void set_cpld_mode_low()	// sel SPI mode
    299          {
    300          	CPLD_MODE_PORT->BSRRH = CPLD_MODE_PIN;
    301          }
    302          
    303          void set_cpld_channel(unsigned char channel)
    304          {
    305            switch(channel) {
    306          	  case 1:
    307          	CPLD_SEL_CHAN_0_PORT->BSRRH = CPLD_SEL_CHAN_0_PIN;		// 0
    308          	CPLD_SEL_CHAN_1_PORT->BSRRH = CPLD_SEL_CHAN_1_PIN;		// 0
    309          	CPLD_SEL_CHAN_2_PORT->BSRRH = CPLD_SEL_CHAN_2_PIN;  	// 0
    310          		  break;
    311          
    312          	  case 2:
    313          	CPLD_SEL_CHAN_0_PORT->BSRRL = CPLD_SEL_CHAN_0_PIN;		// 1
    314          	CPLD_SEL_CHAN_1_PORT->BSRRH = CPLD_SEL_CHAN_1_PIN;		// 0
    315          	CPLD_SEL_CHAN_2_PORT->BSRRH = CPLD_SEL_CHAN_2_PIN;  	// 0
    316          	break;
    317          
    318          	  case 3:
    319          	CPLD_SEL_CHAN_0_PORT->BSRRH = CPLD_SEL_CHAN_0_PIN;		// 0
    320          	CPLD_SEL_CHAN_1_PORT->BSRRL = CPLD_SEL_CHAN_1_PIN;		// 1
    321          	CPLD_SEL_CHAN_2_PORT->BSRRH = CPLD_SEL_CHAN_2_PIN;  	// 0
    322          	break;
    323          
    324          	  case 4:
    325          	CPLD_SEL_CHAN_0_PORT->BSRRL = CPLD_SEL_CHAN_0_PIN;		// 1
    326          	CPLD_SEL_CHAN_1_PORT->BSRRL = CPLD_SEL_CHAN_1_PIN;		// 1
    327          	CPLD_SEL_CHAN_2_PORT->BSRRH = CPLD_SEL_CHAN_2_PIN;  	// 0
    328          	break;
    329          
    330          	  case 5:
    331          	CPLD_SEL_CHAN_0_PORT->BSRRH = CPLD_SEL_CHAN_0_PIN;		// 0
    332          	CPLD_SEL_CHAN_1_PORT->BSRRH = CPLD_SEL_CHAN_1_PIN;		// 0
    333          	CPLD_SEL_CHAN_2_PORT->BSRRL = CPLD_SEL_CHAN_2_PIN;  	// 1
    334          	break;
    335          
    336          	  case 6:
    337          	CPLD_SEL_CHAN_0_PORT->BSRRL = CPLD_SEL_CHAN_0_PIN;		// 1
    338          	CPLD_SEL_CHAN_1_PORT->BSRRH = CPLD_SEL_CHAN_1_PIN;		// 0
    339          	CPLD_SEL_CHAN_2_PORT->BSRRL = CPLD_SEL_CHAN_2_PIN;  	// 1
    340          	break;
    341          
    342          	  case 7:
    343          	CPLD_SEL_CHAN_0_PORT->BSRRH = CPLD_SEL_CHAN_0_PIN;		// 0
    344          	CPLD_SEL_CHAN_1_PORT->BSRRL = CPLD_SEL_CHAN_1_PIN;		// 1
    345          	CPLD_SEL_CHAN_2_PORT->BSRRL = CPLD_SEL_CHAN_2_PIN;  	// 1
    346          	break;
    347          
    348          	  case 8:
    349          	CPLD_SEL_CHAN_0_PORT->BSRRL = CPLD_SEL_CHAN_0_PIN;		// 1
    350          	CPLD_SEL_CHAN_1_PORT->BSRRL = CPLD_SEL_CHAN_1_PIN;		// 1
    351          	CPLD_SEL_CHAN_2_PORT->BSRRL = CPLD_SEL_CHAN_2_PIN;  	// 1
    352          	break;
    353          
    354          	  default:
    355          		  break;
    356            }
    357          }
    358          
    359          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SPI_LowLevel_DeInit
        16   -> GPIO_Init
        16   -> RCC_APB1PeriphClockCmd
        16   -> SPI_Cmd
        16   -> SPI_I2S_DeInit
      16   SPI_LowLevel_Init
        16   -> GPIO_Init
        16   -> GPIO_PinAFConfig
        16   -> RCC_AHB1PeriphClockCmd
        16   -> RCC_APB1PeriphClockCmd
        16   -> spi_nss_high
        16   -> sys_cpld_bus_init
       8   SPI_SendRecieve
         8   -> SPI_I2S_GetFlagStatus
         8   -> SPI_I2S_ReceiveData
         8   -> SPI_I2S_SendData
      24   SPI_Send_Command
        24   -> SPI_SendRecieve
        24   -> spi_nss_high
        24   -> spi_nss_low
      24   init_spi
        24   -> SPI_Cmd
        24   -> SPI_Init
        24   -> SPI_LowLevel_Init
       8   relay_read_moves_spi
         8   -> SPI_Send_Command
         8   -> set_cpld_channel
         8   -> set_cpld_mode_low
       8   relay_read_reg_spi
         8   -> SPI_Send_Command
         8   -> set_cpld_channel
         8   -> set_cpld_mode_low
      16   relay_write_reg_spi
        16   -> SPI_Send_Command
        16   -> set_cpld_channel
        16   -> set_cpld_mode_low
       0   set_cpld_channel
       0   set_cpld_mode_high
       0   set_cpld_mode_low
       0   spi_nss_high
       0   spi_nss_low
       8   spi_read_id
         8   -> SPI_Send_Command
         8   -> set_cpld_channel
         8   -> set_cpld_mode_low
      16   sys_cpld_bus_init
        16   -> GPIO_Init
        16   -> RCC_AHB1PeriphClockCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      84  SPI_LowLevel_DeInit
     174  SPI_LowLevel_Init
      50  SPI_SendRecieve
      40  SPI_Send_Command
      86  init_spi
      30  relay_read_moves_spi
      30  relay_read_reg_spi
      34  relay_write_reg_spi
     194  set_cpld_channel
       8  set_cpld_mode_high
       8  set_cpld_mode_low
      10  spi_nss_high
      10  spi_nss_low
      30  spi_read_id
     110  sys_cpld_bus_init

 
 942 bytes in section .text
 
 942 bytes of CODE memory

Errors: none
Warnings: none
