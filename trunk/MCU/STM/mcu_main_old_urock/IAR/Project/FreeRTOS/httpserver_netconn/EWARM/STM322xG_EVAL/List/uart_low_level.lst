###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        26/Sep/2014  17:06:49
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\uart_low_level.c
#    Command line =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\uart_low_level.c
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM322xG_EVAL -lcN
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\
#        -o
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2x7_ETH_Driver\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EVAL\STM322xG_EVAL\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\lwip\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\netif\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\ipv4\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\port\STM32F2x7\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\port\STM32F2x7\FreeRTOS\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\FreeRTOS_v7.4.2\portable\IAR\ARM_CM3\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\FreeRTOS_v7.4.2\include\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0_2\arm\CMSIS\Include\"
#    List file    =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\uart_low_level.lst
#    Object file  =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\uart_low_level.o
#
###############################################################################

C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\uart_low_level.c
      1          /**
      2            ******************************************************************************
      3            * @file    serial_debug.c
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    07-October-2011
      7            * @brief   This file provide functions to retarget the C library printf function
      8            *          to the USART. 
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     14            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     15            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     16            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     17            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18            *
     19            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     20            ******************************************************************************
     21            */
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "main.h"
     25          #include "uart_low_level.h"
     26          
     27          
     28          #ifdef SERIAL_DEBUG
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* Private define ------------------------------------------------------------*/
     31          #ifdef __GNUC__
     32            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     33               set to 'Yes') calls __io_putchar() */
     34            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     35          #else
     36            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     37          #endif /* __GNUC__ */
     38          
     39          /* Private macro -------------------------------------------------------------*/
     40          /* Private variables ---------------------------------------------------------*/
     41          /* Private function prototypes -----------------------------------------------*/
     42          /* Private functions ---------------------------------------------------------*/
     43          
     44          /**
     45            * @brief  Initialize COM1 interface for serial debug
     46            * @note   COM1 interface is defined in stm3210g_eval.h file (under Utilities\STM32_EVAL\STM322xG_EVAL)  
     47            * @param  None
     48            * @retval None
     49            */
     50          void DebugComPort_Init(void)
     51          {
     52          //  USART_InitTypeDef USART_InitStructure;
     53          
     54            /* USARTx configured as follow:
     55                  - BaudRate = 115200 baud  
     56                  - Word Length = 8 Bits
     57                  - One Stop Bit
     58                  - No parity
     59                  - Hardware flow control disabled (RTS and CTS signals)
     60                  - Receive and transmit enabled
     61            */
     62            GPIO_InitTypeDef GPIO_InitStructure;
     63            USART_InitTypeDef USART_InitStructure;
     64            
     65          
     66            RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
     67          
     68            RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
     69            RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
     70            RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
     71          
     72            
     73            GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);		// RX
     74            GPIO_PinAFConfig(GPIOA, GPIO_PinSource9,  GPIO_AF_USART1);    	// TX
     75          
     76            // Configure USART Tx as alternate function  
     77            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     78            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
     79            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     80          
     81            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
     82            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     83            GPIO_Init(GPIOA, &GPIO_InitStructure);
     84          
     85            // Configure USART Rx as alternate function  
     86            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
     87            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
     88            GPIO_Init(GPIOA, &GPIO_InitStructure);
     89            
     90            
     91            USART_InitStructure.USART_BaudRate = 115200;
     92            USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     93            USART_InitStructure.USART_StopBits = USART_StopBits_1;
     94            USART_InitStructure.USART_Parity = USART_Parity_No;
     95            USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     96            USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
     97          
     98            // USART configuration 
     99            USART_Init(USART1, &USART_InitStructure);
    100              
    101            // Enable USART 
    102            USART_Cmd(USART1, ENABLE);   
    103          }
    104          
    105          /**
    106            * @brief  Retargets the C library printf function to the USART.
    107            * @param  None
    108            * @retval None
    109            */
    110          PUTCHAR_PROTOTYPE
    111          {
    112          //  /* Place your implementation of fputc here */
    113          //  /* e.g. write a character to the USART */
    114            /* Place your implementation of fputc here */
    115            /* e.g. write a character to the USART */
    116            USART_SendData(USART1, (uint8_t) ch);
    117          
    118            /* Loop until the end of transmission */
    119            while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
    120            {}
    121          
    122            return ch;
    123          }
    124          
    125          
    126          
    127          uint8_t gethchar(void)
    128          {
    129          	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
    130          	
    131          	return USART_ReceiveData(USART1); 
    132          }
    133          #endif /* SERIAL_DEBUG */
    134          
    135          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/


 

 


Errors: none
Warnings: none
