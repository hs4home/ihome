###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        26/Sep/2014  17:06:47
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\system_stm32f2xx.c
#    Command line =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\system_stm32f2xx.c
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM322xG_EVAL -lcN
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\
#        -o
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2x7_ETH_Driver\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EVAL\STM322xG_EVAL\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\lwip\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\netif\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\ipv4\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\port\STM32F2x7\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\port\STM32F2x7\FreeRTOS\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\FreeRTOS_v7.4.2\portable\IAR\ARM_CM3\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\FreeRTOS_v7.4.2\include\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0_2\arm\CMSIS\Include\"
#    List file    =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\system_stm32f2xx.lst
#    Object file  =  
#        C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\system_stm32f2xx.o
#
###############################################################################

C:\ihome\MCU\STM\trunk\mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\system_stm32f2xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32f2xx.c
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    07-October-2011
      7            * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32F2xx devices,
      9            *          and is generated by the clock configuration tool
     10            *          "STM32f2xx_Clock_Configuration_V1.0.0.xls"
     11            *             
     12            * 1.  This file provides two functions and one global variable to be called from 
     13            *     user application:
     14            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     15            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     16            *                      depending on the configuration made in the clock xls tool. 
     17            *                      This function is called at startup just after reset and 
     18            *                      before branch to main program. This call is made inside
     19            *                      the "startup_stm32f2xx.s" file.
     20            *
     21            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     22            *                                  by the user application to setup the SysTick 
     23            *                                  timer or configure other parameters.
     24            *                                     
     25            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     26            *                                 be called whenever the core clock is changed
     27            *                                 during program execution.
     28            *
     29            * 2. After each device reset the HSI (16 MHz) is used as system clock source.
     30            *    Then SystemInit() function is called, in "startup_stm32f2xx.s" file, to
     31            *    configure the system clock before to branch to main program.
     32            *
     33            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     34            *    function will do nothing and HSI still used as system clock source. User can 
     35            *    add some code to deal with this issue inside the SetSysClock() function.
     36            *
     37            * 4. The default value of HSE crystal is set to 25MHz, refer to "HSE_VALUE" define
     38            *    in "stm32f2xx.h" file. When HSE is used as system clock source, directly or
     39            *    through PLL, and you are using different crystal you have to adapt the HSE
     40            *    value to your own configuration.
     41            *
     42            * 5. This file configures the system clock as follows:
     43            *=============================================================================
     44            *=============================================================================
     45            *        Supported STM32F2xx device revision    | Rev B and Y
     46            *-----------------------------------------------------------------------------
     47            *        System Clock source                    | PLL (HSE)
     48            *-----------------------------------------------------------------------------
     49            *        SYSCLK(Hz)                             | 120000000
     50            *-----------------------------------------------------------------------------
     51            *        HCLK(Hz)                               | 120000000
     52            *-----------------------------------------------------------------------------
     53            *        AHB Prescaler                          | 1
     54            *-----------------------------------------------------------------------------
     55            *        APB1 Prescaler                         | 4
     56            *-----------------------------------------------------------------------------
     57            *        APB2 Prescaler                         | 2
     58            *-----------------------------------------------------------------------------
     59            *        HSE Frequency(Hz)                      | 25000000
     60            *-----------------------------------------------------------------------------
     61            *        PLL_M                                  | 25
     62            *-----------------------------------------------------------------------------
     63            *        PLL_N                                  | 240
     64            *-----------------------------------------------------------------------------
     65            *        PLL_P                                  | 2
     66            *-----------------------------------------------------------------------------
     67            *        PLL_Q                                  | 5
     68            *-----------------------------------------------------------------------------
     69            *        PLLI2S_N                               | NA
     70            *-----------------------------------------------------------------------------
     71            *        PLLI2S_R                               | NA
     72            *-----------------------------------------------------------------------------
     73            *        I2S input clock                        | NA
     74            *-----------------------------------------------------------------------------
     75            *        VDD(V)                                 | 3.3
     76            *-----------------------------------------------------------------------------
     77            *        Flash Latency(WS)                      | 3
     78            *-----------------------------------------------------------------------------
     79            *        Prefetch Buffer                        | ON
     80            *-----------------------------------------------------------------------------
     81            *        Instruction cache                      | ON
     82            *-----------------------------------------------------------------------------
     83            *        Data cache                             | ON
     84            *-----------------------------------------------------------------------------
     85            *        Require 48MHz for USB OTG FS,          | Enabled
     86            *        SDIO and RNG clock                     |
     87            *-----------------------------------------------------------------------------
     88            *=============================================================================
     89            ****************************************************************************** 
     90            * @attention
     91            *
     92            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     93            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     94            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     95            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     96            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     97            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     98            *
     99            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
    100            ******************************************************************************  
    101            */
    102          
    103          /** @addtogroup CMSIS
    104            * @{
    105            */
    106          
    107          /** @addtogroup stm32f2xx_system
    108            * @{
    109            */  
    110            
    111          /** @addtogroup STM32F2xx_System_Private_Includes
    112            * @{
    113            */
    114          
    115          #include "stm32f2xx.h"
    116          
    117          /**
    118            * @}
    119            */
    120          
    121          /** @addtogroup STM32F2xx_System_Private_TypesDefinitions
    122            * @{
    123            */
    124          
    125          /**
    126            * @}
    127            */
    128          
    129          /** @addtogroup STM32F2xx_System_Private_Defines
    130            * @{
    131            */
    132          
    133          /*!< Uncomment the following line if you need to use external SRAM mounted
    134               on STM322xG_EVAL board as data memory  */
    135          /* #define DATA_IN_ExtSRAM */
    136          
    137          /*!< Uncomment the following line if you need to relocate your vector Table in
    138               Internal SRAM. */
    139          /* #define VECT_TAB_SRAM */
    140          #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
    141                                             This value must be a multiple of 0x200. */
    142          
    143          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N */
    144          #define PLL_M      25
    145          #define PLL_N      240
    146          
    147          /* SYSCLK = PLL_VCO / PLL_P */
    148          #define PLL_P      2
    149          
    150          /* USB OTG FS, SDIO and RNG Clock =  PLL_VCO / PLLQ */
    151          #define PLL_Q      5
    152          
    153          /**
    154            * @}
    155            */
    156          
    157          /** @addtogroup STM32F2xx_System_Private_Macros
    158            * @{
    159            */
    160          
    161          /**
    162            * @}
    163            */
    164          
    165          /** @addtogroup STM32F2xx_System_Private_Variables
    166            * @{
    167            */
    168          
    169            uint32_t SystemCoreClock = 100000000;  //120000000
    170          
    171            __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
    172          
    173          /**
    174            * @}
    175            */
    176          
    177          /** @addtogroup STM32F2xx_System_Private_FunctionPrototypes
    178            * @{
    179            */
    180          
    181          static void SetSysClock(void);
    182          #ifdef DATA_IN_ExtSRAM
    183            static void SystemInit_ExtMemCtl(void); 
    184          #endif /* DATA_IN_ExtSRAM */
    185          
    186          /**
    187            * @}
    188            */
    189          
    190          /** @addtogroup STM32F2xx_System_Private_Functions
    191            * @{
    192            */
    193          
    194          /**
    195            * @brief  Setup the microcontroller system
    196            *         Initialize the Embedded Flash Interface, the PLL and update the 
    197            *         SystemFrequency variable.
    198            * @param  None
    199            * @retval None
    200            */
    201          void SystemInit(void)
    202          {
    203            /* Reset the RCC clock configuration to the default reset state ------------*/
    204            /* Set HSION bit */
    205            RCC->CR |= (uint32_t)0x00000001;
    206          
    207            /* Reset CFGR register */
    208            RCC->CFGR = 0x00000000;
    209          
    210            /* Reset HSEON, CSSON and PLLON bits */
    211            RCC->CR &= (uint32_t)0xFEF6FFFF;
    212          
    213            /* Reset PLLCFGR register */
    214            RCC->PLLCFGR = 0x24003010;
    215          
    216            /* Reset HSEBYP bit */
    217            RCC->CR &= (uint32_t)0xFFFBFFFF;
    218          
    219            /* Disable all interrupts */
    220            RCC->CIR = 0x00000000;
    221          
    222          #ifdef DATA_IN_ExtSRAM
    223            SystemInit_ExtMemCtl(); 
    224          #endif /* DATA_IN_ExtSRAM */
    225                   
    226            /* Configure the System clock source, PLL Multiplier and Divider factors, 
    227               AHB/APBx prescalers and Flash settings ----------------------------------*/
    228            SetSysClock();
    229          
    230            /* Configure the Vector Table location add offset address ------------------*/
    231          #ifdef VECT_TAB_SRAM
    232            SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
    233          #else
    234            SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
    235          #endif
    236          }
    237          
    238          /**
    239            * @brief  Update SystemCoreClock variable according to Clock Register Values.
    240            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    241            *         be used by the user application to setup the SysTick timer or configure
    242            *         other parameters.
    243            *           
    244            * @note   Each time the core clock (HCLK) changes, this function must be called
    245            *         to update SystemCoreClock variable value. Otherwise, any configuration
    246            *         based on this variable will be incorrect.         
    247            *     
    248            * @note   - The system frequency computed by this function is not the real 
    249            *           frequency in the chip. It is calculated based on the predefined 
    250            *           constant and the selected clock source:
    251            *             
    252            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    253            *                                              
    254            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    255            *                          
    256            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
    257            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    258            *         
    259            *         (*) HSI_VALUE is a constant defined in stm32f2xx.h file (default value
    260            *             16 MHz) but the real value may vary depending on the variations
    261            *             in voltage and temperature.   
    262            *    
    263            *         (**) HSE_VALUE is a constant defined in stm32f2xx.h file (default value
    264            *              25 MHz), user has to ensure that HSE_VALUE is same as the real
    265            *              frequency of the crystal used. Otherwise, this function may
    266            *              have wrong result.
    267            *                
    268            *         - The result of this function could be not correct when using fractional
    269            *           value for HSE crystal.
    270            *     
    271            * @param  None
    272            * @retval None
    273            */
    274          void SystemCoreClockUpdate(void)
    275          {
    276            uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
    277            
    278            /* Get SYSCLK source -------------------------------------------------------*/
    279            tmp = RCC->CFGR & RCC_CFGR_SWS;
    280          
    281            switch (tmp)
    282            {
    283              case 0x00:  /* HSI used as system clock source */
    284                SystemCoreClock = HSI_VALUE;
    285                break;
    286              case 0x04:  /* HSE used as system clock source */
    287                SystemCoreClock = HSE_VALUE;
    288                break;
    289              case 0x08:  /* PLL used as system clock source */
    290          
    291                /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
    292                   SYSCLK = PLL_VCO / PLL_P
    293                   */    
    294                pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
    295                pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    296                
    297                if (pllsource != 0)
    298                {
    299                  /* HSE used as PLL clock source */
    300                  pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
    301                }
    302                else
    303                {
    304                  /* HSI used as PLL clock source */
    305                  pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
    306                }
    307          
    308                pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
    309                SystemCoreClock = pllvco/pllp;
    310                break;
    311              default:
    312                SystemCoreClock = HSI_VALUE;
    313                break;
    314            }
    315            /* Compute HCLK frequency --------------------------------------------------*/
    316            /* Get HCLK prescaler */
    317            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    318            /* HCLK frequency */
    319            SystemCoreClock >>= tmp;
    320          }
    321          
    322          /**
    323            * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
    324            *         AHB/APBx prescalers and Flash settings
    325            * @Note   This function should be called only once the RCC clock configuration  
    326            *         is reset to the default reset state (done in SystemInit() function).   
    327            * @param  None
    328            * @retval None
    329            */
    330          static void SetSysClock(void)
    331          {
    332          /******************************************************************************/
    333          /*            PLL (clocked by HSE) used as System clock source                */
    334          /******************************************************************************/
    335            __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
    336            
    337            /* Enable HSE */
    338            RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    339           
    340            /* Wait till HSE is ready and if Time out is reached exit */
    341            do
    342            {
    343              HSEStatus = RCC->CR & RCC_CR_HSERDY;
    344              StartUpCounter++;
    345            } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    346          
    347            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    348            {
    349              HSEStatus = (uint32_t)0x01;
    350            }
    351            else
    352            {
    353              HSEStatus = (uint32_t)0x00;
    354            }
    355          
    356            if (HSEStatus == (uint32_t)0x01)
    357            {
    358              /* HCLK = SYSCLK / 1*/
    359              RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
    360                
    361              /* PCLK2 = HCLK / 2*/
    362              RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    363              
    364              /* PCLK1 = HCLK / 4*/
    365              RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
    366          
    367              /* Configure the main PLL */
    368              RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
    369                             (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
    370          
    371              /* Enable the main PLL */
    372              RCC->CR |= RCC_CR_PLLON;
    373          
    374              /* Wait till the main PLL is ready */
    375              while((RCC->CR & RCC_CR_PLLRDY) == 0)
    376              {
    377              }
    378             
    379              /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    380              FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_3WS;
    381          
    382              /* Select the main PLL as system clock source */
    383              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    384              RCC->CFGR |= RCC_CFGR_SW_PLL;
    385          
    386              /* Wait till the main PLL is used as system clock source */
    387              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
    388              {
    389              }
    390            }
    391            else
    392            { /* If HSE fails to start-up, the application will have wrong clock
    393                   configuration. User can add here some code to deal with this error */
    394            }
    395          
    396          }
    397          
    398          /**
    399            * @brief  Setup the external memory controller. Called in startup_stm32f2xx.s
    400            *         before jump to __main
    401            * @param  None
    402            * @retval None
    403            */
    404          #ifdef DATA_IN_ExtSRAM
    405          /**
    406            * @brief  Setup the external memory controller.
    407            *         Called in startup_stm32f2xx.s before jump to main.
    408            *         This function configures the external SRAM mounted on STM322xG_EVAL board
    409            *         This SRAM will be used as program data memory (including heap and stack).
    410            * @param  None
    411            * @retval None
    412            */
    413          void SystemInit_ExtMemCtl(void)
    414          {
    415          /*-- GPIOs Configuration -----------------------------------------------------*/
    416          /*
    417           +-------------------+--------------------+------------------+------------------+
    418           +                       SRAM pins assignment                                  +
    419           +-------------------+--------------------+------------------+------------------+
    420           | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0  <-> FSMC_A0 | PG0 <-> FSMC_A10 |
    421           | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1  <-> FSMC_A1 | PG1 <-> FSMC_A11 |
    422           | PD4  <-> FSMC_NOE | PE7  <-> FSMC_D4   | PF2  <-> FSMC_A2 | PG2 <-> FSMC_A12 |
    423           | PD5  <-> FSMC_NWE | PE8  <-> FSMC_D5   | PF3  <-> FSMC_A3 | PG3 <-> FSMC_A13 |
    424           | PD8  <-> FSMC_D13 | PE9  <-> FSMC_D6   | PF4  <-> FSMC_A4 | PG4 <-> FSMC_A14 |
    425           | PD9  <-> FSMC_D14 | PE10 <-> FSMC_D7   | PF5  <-> FSMC_A5 | PG5 <-> FSMC_A15 |
    426           | PD10 <-> FSMC_D15 | PE11 <-> FSMC_D8   | PF12 <-> FSMC_A6 | PG9 <-> FSMC_NE2 |
    427           | PD11 <-> FSMC_A16 | PE12 <-> FSMC_D9   | PF13 <-> FSMC_A7 |------------------+
    428           | PD12 <-> FSMC_A17 | PE13 <-> FSMC_D10  | PF14 <-> FSMC_A8 | 
    429           | PD14 <-> FSMC_D0  | PE14 <-> FSMC_D11  | PF15 <-> FSMC_A9 | 
    430           | PD15 <-> FSMC_D1  | PE15 <-> FSMC_D12  |------------------+
    431           +-------------------+--------------------+
    432          */
    433             /* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    434            RCC->AHB1ENR   = 0x00000078;
    435            
    436            /* Connect PDx pins to FSMC Alternate function */
    437            GPIOD->AFR[0]  = 0x00cc00cc;
    438            GPIOD->AFR[1]  = 0xcc0ccccc;
    439            /* Configure PDx pins in Alternate function mode */  
    440            GPIOD->MODER   = 0xa2aa0a0a;
    441            /* Configure PDx pins speed to 100 MHz */  
    442            GPIOD->OSPEEDR = 0xf3ff0f0f;
    443            /* Configure PDx pins Output type to push-pull */  
    444            GPIOD->OTYPER  = 0x00000000;
    445            /* No pull-up, pull-down for PDx pins */ 
    446            GPIOD->PUPDR   = 0x00000000;
    447          
    448            /* Connect PEx pins to FSMC Alternate function */
    449            GPIOE->AFR[0]  = 0xc00000cc;
    450            GPIOE->AFR[1]  = 0xcccccccc;
    451            /* Configure PEx pins in Alternate function mode */ 
    452            GPIOE->MODER   = 0xaaaa800a;
    453            /* Configure PEx pins speed to 100 MHz */ 
    454            GPIOE->OSPEEDR = 0xffffc00f;
    455            /* Configure PEx pins Output type to push-pull */  
    456            GPIOE->OTYPER  = 0x00000000;
    457            /* No pull-up, pull-down for PEx pins */ 
    458            GPIOE->PUPDR   = 0x00000000;
    459          
    460            /* Connect PFx pins to FSMC Alternate function */
    461            GPIOF->AFR[0]  = 0x00cccccc;
    462            GPIOF->AFR[1]  = 0xcccc0000;
    463            /* Configure PFx pins in Alternate function mode */   
    464            GPIOF->MODER   = 0xaa000aaa;
    465            /* Configure PFx pins speed to 100 MHz */ 
    466            GPIOF->OSPEEDR = 0xff000fff;
    467            /* Configure PFx pins Output type to push-pull */  
    468            GPIOF->OTYPER  = 0x00000000;
    469            /* No pull-up, pull-down for PFx pins */ 
    470            GPIOF->PUPDR   = 0x00000000;
    471          
    472            /* Connect PGx pins to FSMC Alternate function */
    473            GPIOG->AFR[0]  = 0x00cccccc;
    474            GPIOG->AFR[1]  = 0x000000c0;
    475            /* Configure PGx pins in Alternate function mode */ 
    476            GPIOG->MODER   = 0x00080aaa;
    477            /* Configure PGx pins speed to 100 MHz */ 
    478            GPIOG->OSPEEDR = 0x000c0fff;
    479            /* Configure PGx pins Output type to push-pull */  
    480            GPIOG->OTYPER  = 0x00000000;
    481            /* No pull-up, pull-down for PGx pins */ 
    482            GPIOG->PUPDR   = 0x00000000;
    483            
    484          /*-- FSMC Configuration ------------------------------------------------------*/
    485            /* Enable the FSMC interface clock */
    486            RCC->AHB3ENR         = 0x00000001;
    487          
    488            /* Configure and enable Bank1_SRAM2 */
    489            FSMC_Bank1->BTCR[2]  = 0x00001015;
    490            FSMC_Bank1->BTCR[3]  = 0x00010400;
    491            FSMC_Bank1E->BWTR[2] = 0x0fffffff;
    492          /*
    493            Bank1_SRAM2 is configured as follow:
    494          
    495            p.FSMC_AddressSetupTime = 0;
    496            p.FSMC_AddressHoldTime = 0;
    497            p.FSMC_DataSetupTime = 4;
    498            p.FSMC_BusTurnAroundDuration = 1;
    499            p.FSMC_CLKDivision = 0;
    500            p.FSMC_DataLatency = 0;
    501            p.FSMC_AccessMode = FSMC_AccessMode_A;
    502          
    503            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM2;
    504            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
    505            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_PSRAM;
    506            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
    507            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
    508            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
    509            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    510            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
    511            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
    512            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
    513            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
    514            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
    515            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
    516            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
    517            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
    518          */
    519            
    520          }
    521          #endif /* DATA_IN_ExtSRAM */
    522          
    523          
    524          /**
    525            * @}
    526            */
    527          
    528          /**
    529            * @}
    530            */
    531            
    532          /**
    533            * @}
    534            */
    535          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SetSysClock
      12   SystemCoreClockUpdate
       8   SystemInit
         8   -> SetSysClock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      16  AHBPrescTable
     182  SetSysClock
       4  SystemCoreClock
     174  SystemCoreClockUpdate
      70  SystemInit

 
  20 bytes in section .data
 478 bytes in section .text
 
 478 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
